- name: Check if PostgreSQL is installed
  command: psql --version
  register: postgresql_version_check
  ignore_errors: yes

- name: Fail if PostgreSQL is not installed
  fail:
    msg: "PostgreSQL is not installed"
  when: postgresql_version_check.rc != 0

- name: Locate initdb binary
  find:
    paths: /usr/lib
    patterns: initdb
    recurse: yes
  register: initdb_search

- name: Set initdb path variable
  set_fact:
    initdb_path: "{{ initdb_search.files[0].path }}"
  when: initdb_search.matched > 0

- name: Fail if initdb binary is not found
  fail:
    msg: "initdb binary not found"
  when: initdb_search.matched == 0

- name: Check if PostgreSQL data directory exists
  stat:
    path: "{{ postgresql_data_path }}"
  register: postgresql_data_dir

- name: Check if PostgreSQL data directory is empty
  command: find "{{ postgresql_data_path }}" -mindepth 1 -print -quit
  register: postgresql_data_dir_contents
  when: postgresql_data_dir.stat.exists
  changed_when: false
  failed_when: false

- name: Clear PostgreSQL data directory if not empty
  command: rm -rf "{{ postgresql_data_path }}/*"
  when: postgresql_data_dir.stat.exists and postgresql_data_dir_contents.stdout != ""

- name: Initialize PostgreSQL
  shell: "{{ initdb_path }} -D {{ postgresql_data_path }}"
  become_user: postgres
  when: postgresql_data_dir.stat.exists == false or postgresql_data_dir_contents.stdout == ""

- name: Start and enable PostgreSQL service
  service: name=postgresql state=started enabled=yes

- name: Locate pg_hba.conf
  find:
    paths: /etc/postgresql
    patterns: pg_hba.conf
    recurse: yes
  register: pg_hba_conf_search

- name: Set pg_hba_conf path variable
  set_fact:
    pg_hba_conf: "{{ pg_hba_conf_search.files[0].path }}"
  when: pg_hba_conf_search.matched > 0

- name: Fail if pg_hba.conf is not found
  fail:
    msg: "pg_hba.conf not found"
  when: pg_hba_conf_search.matched == 0

- name: Update pg_hba.conf to allow password authentication for postgres user
  lineinfile:
    path: "{{ pg_hba_conf }}"
    regexp: '^local\s+all\s+postgres\s+peer$'
    line: 'local   all             postgres                                md5'
    state: present
  become_user: postgres
  notify: Restart PostgreSQL

- name: Locate postgresql.conf
  find:
    paths: /etc/postgresql
    patterns: postgresql.conf
    recurse: yes
  register: postgresql_conf_search

- name: Set postgresql.conf path variable
  set_fact:
    postgresql_conf: "{{ postgresql_conf_search.files[0].path }}"
  when: postgresql_conf_search.matched > 0

- name: Fail if postgresql.conf is not found
  fail:
    msg: "postgresql.conf not found"
  when: postgresql_conf_search.matched == 0

- name: Allow remote connections in pg_hba.conf
  lineinfile:
    path: "{{ pg_hba_conf }}"
    regexp: '^host'
    line: 'host    all             all             0.0.0.0/0               md5'
    create: yes
  become_user: postgres
  notify: Restart PostgreSQL

- name: Listen for all addresses in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf }}"
    regexp: '^#listen_addresses =.*'
    line: "listen_addresses = '*'"
    create: yes
  become_user: postgres
  notify: Restart PostgreSQL

- name: Create a PostgreSQL database
  postgresql_db:
    name: "{{ db_name }}"
    state: present
  become_user: postgres

- name: Create a PostgreSQL user
  postgresql_user:
    db: "{{db_name}}"
    password: "{{ db_pass }}"
    encrypted: true
    name: "{{db_user}}"
    state: present
  become_user: postgres
  
- name: Create the secrets directory
  file: 
    path: "{{ secret_dir }}"
    state: directory
    mode: '0700'

- name: Save admin user credentials
  file:
    path: "{{ secret_dir }}{{ secret_file }}"
    state: touch
    mode: '0600'

- name: Write admin user credentials to file
  copy:
    dest: "{{ secret_dir }}{{ secret_file }}"
    content: |
      admin_user: {{ db_user }}
      admin_password: {{ db_pass }}
    mode: '0600'

- name: Grant db user access to db
  postgresql_privs:
    type: database
    database: "{{ db_name }}"
    roles: "{{db_user}}"
    privs: all
    grant_option: false
  become_user: postgres